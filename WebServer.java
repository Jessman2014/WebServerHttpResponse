package web;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;

/**
   DO NOT EDIT THIS FILE!
 **/
public class WebServer extends Thread {
	private int port;

	public static void main(String[] args) {
		WebServer server = new WebServer(88);
		server.start();
	}

	private void log(String msg) {
		System.out.println(msg);
	}

	private void logStackTrace(Exception e) {
		for (StackTraceElement el : e.getStackTrace()) {
			log(el.toString());
		}
	}

	public WebServer(int port) {
		this.port = port;
	}

	private String defaultError(Exception exception) {
		String message = exception.getMessage();
		String rawResponse = "HTTP:/1.1 500 ERROR\n";
		rawResponse += "Content-type: text/plain\n";
		rawResponse += "Content-length: " + message.length() + "\n";
		rawResponse += "\n";
		rawResponse += message;
		return rawResponse;
	}

	public void run() {
		ServerSocket serverSocket = null;
		log("Starting HTTP Server");

		try {
			serverSocket = new ServerSocket(port);
		} catch (Exception e) {
			log("Fatal Error:" + e.getMessage());
			log("Exiting the program.");
			return;
		}

		try {
			while (true) {
				log("Server is ready.  Waiting for requests...");
				try {
					Socket connection = serverSocket.accept();					
					try {
						BufferedReader input = new BufferedReader(new InputStreamReader(connection.getInputStream()));
						HttpRequest request = RequestFactory.createRequest(input);
						if (request == null) {
							throw new Exception("factory failed to make a valid web request");
						} else {
							HttpResponse response = new HttpRequestHandler().handleRequest(request);
							connection.getOutputStream().write(response.toString().getBytes());
							connection.close();
						}

					} catch (Exception internalException) {
						logStackTrace(internalException);
						String raw = defaultError(internalException);
						connection.getOutputStream().write(raw.getBytes());
						connection.close();
					}
				} catch (Exception e) {
				}
			}
		} finally {
			if (serverSocket != null)
				try {
					serverSocket.close();
				} catch (IOException e) {
				}
		}

	}
}
